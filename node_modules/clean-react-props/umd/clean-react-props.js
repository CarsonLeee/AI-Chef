/*! clean-react-props v0.4.0 | (c) 2020 Ryan Hefner | MIT License | https://github.com/ryanhefner/clean-react-props !*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['clean-react-props'] = {}));
}(this, (function (exports) { 'use strict';

  var HTMLProps = ['accept', 'acceptCharset', 'accessKey', 'action', 'allowFullScreen', 'allowTransparency', // ?
  'alt', 'async', 'autoComplete', 'autoFocus', 'autoPlay', 'capture', 'cellPadding', 'cellSpacing', 'challenge', 'charSet', 'checked', 'cite', 'classID', 'className', 'colSpan', 'cols', 'content', 'contentEditable', 'contextMenu', 'controls', 'controlsList', 'coords', 'crossOrigin', 'data', 'dateTime', 'default', 'defer', 'dir', 'disabled', 'download', 'draggable', 'encType', 'form', 'formAction', 'formEncType', 'formMethod', 'formNoValidate', 'formTarget', 'frameBorder', 'headers', 'height', 'hidden', 'high', 'href', 'hrefLang', 'htmlFor', 'httpEquiv', 'icon', 'id', 'inputMode', 'integrity', 'is', 'keyParams', 'keyType', 'kind', 'label', 'lang', 'list', 'loop', 'low', 'manifest', 'marginHeight', 'marginWidth', 'max', 'maxLength', 'media', 'mediaGroup', 'method', 'min', 'minLength', 'multiple', 'muted', 'name', 'noValidate', 'nonce', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'profile', 'radioGroup', 'readOnly', 'rel', 'required', 'reversed', 'role', 'rowSpan', 'rows', 'sandbox', 'scope', 'scoped', 'scrolling', 'seamless', 'selected', 'shape', 'size', 'sizes', 'span', 'spellCheck', 'src', 'srcDoc', 'srcLang', 'srcSet', 'start', 'step', 'style', 'summary', 'tabIndex', 'target', 'title', 'type', 'useMap', 'value', 'width', 'wmode', 'wrap'];
  var RDFProps = ['about', 'datatype', 'inlist', 'prefix', 'property', 'resource', 'typeof', 'vocab'];
  var SVGProps = ['accentHeight', 'accumulate', 'additive', 'alignmentBaseline', 'allowReorder', 'alphabetic', 'amplitude', 'arabicForm', 'ascent', 'attributeName', 'attributeType', 'autoReverse', 'azimuth', 'baseFrequency', 'baseProfile', 'baselineShift', 'bbox', 'begin', 'bias', 'by', 'calcMode', 'capHeight', 'clip', 'clipPath', 'clipPathUnits', 'clipRule', 'colorInterpolation', 'colorInterpolationFilters', 'colorProfile', 'colorRendering', 'contentScriptType', 'contentStyleType', 'cursor', 'cx', 'cy', 'd', 'decelerate', 'descent', 'diffuseConstant', 'direction', 'display', 'divisor', 'dominantBaseline', 'dur', 'dx', 'dy', 'edgeMode', 'elevation', 'enableBackground', 'end', 'exponent', 'externalResourcesRequired', 'fill', 'fillOpacity', 'fillRule', 'filter', 'filterRes', 'filterUnits', 'floodColor', 'floodOpacity', 'focusable', 'fontFamily', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontWeight', 'format', 'from', 'fx', 'fy', 'g1', 'g2', 'glyphName', 'glyphOrientationHorizontal', 'glyphOrientationVertical', 'glyphRef', 'gradientTransform', 'gradientUnits', 'hanging', 'horizAdvX', 'horizOriginX', 'ideographic', 'imageRendering', 'in', 'in2', 'intercept', 'k', 'k1', 'k2', 'k3', 'k4', 'kernelMatrix', 'kernelUnitLength', 'kerning', 'keyPoints', 'keySplines', 'keyTimes', 'lengthAdjust', 'letterSpacing', 'lightingColor', 'limitingConeAngle', 'local', 'markerEnd', 'markerHeight', 'markerMid', 'markerStart', 'markerUnits', 'markerWidth', 'mask', 'maskContentUnits', 'maskUnits', 'mathematical', 'mode', 'numOctaves', 'offset', 'opacity', 'operator', 'order', 'orient', 'orientation', 'origin', 'overflow', 'overlinePosition', 'overlineThickness', 'paintOrder', 'panose1', 'pathLength', 'patternContentUnits', 'patternTransform', 'patternUnits', 'pointerEvents', 'points', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'preserveAlpha', 'preserveAspectRatio', 'primitiveUnits', 'r', 'radius', 'refX', 'refY', 'renderingIntent', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'result', 'rotate', 'rx', 'ry', 'scale', 'seed', 'shapeRendering', 'slope', 'spacing', 'specularConstant', 'specularExponent', 'speed', 'spreadMethod', 'startOffset', 'stdDeviation', 'stemh', 'stemv', 'stitchTiles', 'stopColor', 'stopOpacity', 'strikethroughPosition', 'strikethroughThickness', 'string', 'stroke', 'strokeDasharray', 'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'surfaceScale', 'systemLanguage', 'tableValues', 'targetX', 'targetY', 'textAnchor', 'textDecoration', 'textLength', 'textRendering', 'to', 'transform', 'u1', 'u2', 'underlinePosition', 'underlineThickness', 'unicode', 'unicodeBidi', 'unicodeRange', 'unitsPerEm', 'vAlphabetic', 'vHanging', 'vIdeographic', 'vMathematical', 'values', 'vectorEffect', 'version', 'vertAdvY', 'vertOriginX', 'vertOriginY', 'viewBox', 'viewTarget', 'visibility', 'widths', 'wordSpacing', 'writingMode', 'x', 'x1', 'x2', 'xChannelSelector', 'xHeight', 'xlinkActuate', 'xlinkArcrole', 'xlinkHref', 'xlinkRole', 'xlinkShow', 'xlinkTitle', 'xlinkType', 'xmlns', 'xmlnsXlink', 'xmlBase', 'xmlLang', 'xmlSpace', 'y', 'y1', 'y2', 'yChannelSelector', 'z', 'zoomAndPan'];
  var ValidEvents = [// Clipboard Events
  'onCopy', 'onCut', 'onPaste', // Composition Events
  'onCompositionEnd', 'onCompositionStart', 'onCompositionUpdate', // Keyboard Events
  'onKeyDown', 'onKeyPress', 'onKeyUp', // Focus Events
  'onFocus', 'onBlur', // Form Events
  'onChange', 'onInput', 'onInvalid', 'onReset', 'onSubmit', // Mouse Events
  'onClick', 'onContextMenu', 'onDoubleClick', 'onDrag', 'onDragEnd', 'onDragEnter', 'onDragExit', 'onDragLeave', 'onDragOver', 'onDragStart', 'onDrop', 'onMouseDown', 'onMouseEnter', 'onMouseLeave', 'onMouseMove', 'onMouseOut', 'onMouseOver', 'onMouseUp', // Pointer Events
  'onPointerDown', 'onPointerMove', 'onPointerUp', 'onPointerCancel', 'onGotPointerCapture', 'onLostPointerCapture', 'onPointerEnter', 'onPointerLeave', 'onPointerOver', 'onPointerOut', // Selection Events
  'onSelect', // Touch Events
  'onTouchCancel', 'onTouchEnd', 'onTouchMove', 'onTouchStart', // UI Events
  'onScroll', // Wheel Events
  'onWheel', // Media Events
  'onAbort', 'onCanPlay', 'onCanPlayThrough', 'onDurationChange', 'onEmptied', 'onEncrypted', 'onEnded', 'onError', 'onLoadedData', 'onLoadedMetadata', 'onLoadStart', 'onPause', 'onPlay', 'onPlaying', 'onProgress', 'onRateChange', 'onSeeked', 'onSeeking', 'onStalled', 'onSuspend', 'onTimeUpdate', 'onVolumeChange', 'onWaiting', // Image Events
  'onLoad', 'onError', // Animation Events
  'onAnimationStart', 'onAnimationEnd', 'onAnimationIteration', // Transition Events
  'onTransitionEnd', // Other Events
  'onToggle'];

  var DataRegex = /data-([a-zA-Z0-9\-]*)/;
  var AriaRegex = /aria-([a-zA-Z0-9\-]*)/;
  /**
   * Return an object containing the valid props to apply to an HTMLElement.
   *
   * @param {Object} props - Props to be filtered and applied to DOM element.
   * @param {Array} excludes - Array of props to exlude
   * @param {Array} customAttributes - Array of custom attributes to include
   * @return {Object}
   */

  var cleanProps = function cleanProps(props, excludes, customAttributes) {
    if (props === void 0) {
      props = {};
    }

    if (excludes === void 0) {
      excludes = [];
    }

    if (customAttributes === void 0) {
      customAttributes = [];
    }

    var returnProps = Object.assign({}, props);
    var validProps = Object.keys(returnProps).filter(function (key) {
      if (excludes.indexOf(key) !== -1) {
        return false;
      }

      if (customAttributes.indexOf(key) > -1) {
        return true;
      }

      if (HTMLProps.indexOf(key) !== -1) {
        return true;
      }

      if (RDFProps.indexOf(key) !== -1) {
        return true;
      }

      if (DataRegex.test(key)) {
        return true;
      }

      if (AriaRegex.test(key)) {
        return true;
      }

      if (ValidEvents.indexOf(key) !== -1) {
        return true;
      }

      return false;
    });
    Object.keys(returnProps).forEach(function (key) {
      if (validProps.indexOf(key) === -1) {
        delete returnProps[key];
      }
    });
    return returnProps;
  };
  /**
   * Return an object containing the valid props to apply to an SVGElement.
   *
   * @param {Object} props
   * @param {Object}
   */


  var cleanSVGProps = function cleanSVGProps(props, excludes) {
    if (props === void 0) {
      props = {};
    }

    if (excludes === void 0) {
      excludes = [];
    }

    var returnProps = Object.assign({}, props);
    var validProps = Object.keys(returnProps).filter(function (key) {
      if (excludes.indexOf(key) !== -1) {
        return false;
      }

      if (SVGProps.indexOf(key) !== -1) {
        return true;
      }

      return false;
    });
    Object.keys(returnProps).forEach(function (key) {
      if (validProps.indexOf(key) === -1) {
        delete returnProps[key];
      }
    });
    return returnProps;
  }; // Exports ___________________________________________________________________

  exports.HTMLProps = HTMLProps;
  exports.RDFProps = RDFProps;
  exports.SVGProps = SVGProps;
  exports.ValidEvents = ValidEvents;
  exports.cleanSVGProps = cleanSVGProps;
  exports.default = cleanProps;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
/* follow me on Twitter! @ryanhefner */
