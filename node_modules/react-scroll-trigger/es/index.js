function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import throttle from 'lodash.throttle';
import cleanProps from 'clean-react-props';

var ScrollTrigger = /*#__PURE__*/function (_Component) {
  _inheritsLoose(ScrollTrigger, _Component);

  function ScrollTrigger(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.onScrollThrottled = throttle(_this.onScroll.bind(_assertThisInitialized(_this)), props.throttleScroll, {
      trailing: false
    });
    _this.onResizeThrottled = throttle(_this.onResize.bind(_assertThisInitialized(_this)), props.throttleResize, {
      trailing: false
    });
    _this.state = {
      inViewport: false,
      progress: 0,
      lastScrollPosition: null,
      lastScrollTime: null
    };
    return _this;
  }

  var _proto = ScrollTrigger.prototype;

  _proto.componentDidMount = function componentDidMount() {
    addEventListener('resize', this.onResizeThrottled);
    addEventListener('scroll', this.onScrollThrottled);

    if (this.props.triggerOnLoad) {
      this.checkStatus();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
    if (prevProps.throttleScroll !== this.props.throttleScroll) {
      removeEventListener('scroll', this.onScrollThrottled);
      this.onScrollThrottled = throttle(this.onScroll.bind(this), this.props.throttleScroll, {
        trailing: false
      });
      addEventListener('scroll', this.onScrollThrottled);
    }

    if (prevProps.throttleResize !== this.props.throttleResize) {
      removeEventListener('resize', this.onResizeThrottled);
      this.onResizeThrottled = throttle(this.onResize.bind(this), this.props.throttleResize, {
        trailing: false
      });
      addEventListener('resize', this.onResizeThrottled);
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    removeEventListener('resize', this.onResizeThrottled);
    removeEventListener('scroll', this.onScrollThrottled);
  };

  _proto.onResize = function onResize() {
    this.checkStatus();
  };

  _proto.onScroll = function onScroll() {
    this.checkStatus();
  };

  _proto.checkStatus = function checkStatus() {
    var _this$props = this.props,
        containerRef = _this$props.containerRef,
        onEnter = _this$props.onEnter,
        onExit = _this$props.onExit,
        onProgress = _this$props.onProgress;
    var _this$state = this.state,
        lastScrollPosition = _this$state.lastScrollPosition,
        lastScrollTime = _this$state.lastScrollTime;
    var element = ReactDOM.findDOMNode(this.element);
    var elementRect = element.getBoundingClientRect();
    var viewportStart = 0;
    var scrollingElement = typeof containerRef === 'string' ? document.querySelector(containerRef) : containerRef;
    var viewportEnd = containerRef === document.documentElement ? Math.max(containerRef.clientHeight, window.innerHeight || 0) : scrollingElement.clientHeight;
    var inViewport = elementRect.top <= viewportEnd && elementRect.bottom >= viewportStart;
    var position = window.scrollY;
    var velocity = lastScrollPosition && lastScrollTime ? Math.abs((lastScrollPosition - position) / (lastScrollTime - Date.now())) : null;

    if (inViewport) {
      var progress = Math.max(0, Math.min(1, 1 - elementRect.bottom / (viewportEnd + elementRect.height)));

      if (!this.state.inViewport) {
        this.setState({
          inViewport: inViewport
        });
        onEnter({
          progress: progress,
          velocity: velocity
        }, this);
      }

      onProgress({
        progress: progress,
        velocity: velocity
      }, this);
      this.setState({
        lastScrollPosition: position,
        lastScrollTime: Date.now()
      });
      return;
    }

    if (this.state.inViewport) {
      var _progress = elementRect.top <= viewportEnd ? 1 : 0;

      this.setState({
        lastScrollPosition: position,
        lastScrollTime: Date.now(),
        inViewport: inViewport,
        progress: _progress
      });
      onProgress({
        progress: _progress,
        velocity: velocity
      }, this);
      onExit({
        progress: _progress,
        velocity: velocity
      }, this);
    }
  };

  _proto.render = function render() {
    var _this2 = this;

    var _this$props2 = this.props,
        children = _this$props2.children,
        component = _this$props2.component;
    var elementMethod = /*#__PURE__*/React.isValidElement(component) ? 'cloneElement' : 'createElement';
    return React[elementMethod](component, _objectSpread(_objectSpread({}, cleanProps(this.props, ['onProgress'])), {}, {
      ref: function ref(element) {
        _this2.element = element;
      }
    }), children);
  };

  return ScrollTrigger;
}(Component);

ScrollTrigger.propTypes = {
  component: PropTypes.oneOfType([PropTypes.element, PropTypes.node]),
  containerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  throttleResize: PropTypes.number,
  throttleScroll: PropTypes.number,
  triggerOnLoad: PropTypes.bool,
  onEnter: PropTypes.func,
  onExit: PropTypes.func,
  onProgress: PropTypes.func
};
ScrollTrigger.defaultProps = {
  component: 'div',
  containerRef: typeof document !== 'undefined' ? document.documentElement : 'html',
  throttleResize: 100,
  throttleScroll: 100,
  triggerOnLoad: true,
  onEnter: function onEnter() {},
  onExit: function onExit() {},
  onProgress: function onProgress() {}
};
export default ScrollTrigger;